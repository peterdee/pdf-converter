// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: grpc/index.proto

package grpc_client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SplitterClient is the client API for Splitter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SplitterClient interface {
	SplitData(ctx context.Context, in *SplitDataRequest, opts ...grpc.CallOption) (*SplitDataResponse, error)
}

type splitterClient struct {
	cc grpc.ClientConnInterface
}

func NewSplitterClient(cc grpc.ClientConnInterface) SplitterClient {
	return &splitterClient{cc}
}

func (c *splitterClient) SplitData(ctx context.Context, in *SplitDataRequest, opts ...grpc.CallOption) (*SplitDataResponse, error) {
	out := new(SplitDataResponse)
	err := c.cc.Invoke(ctx, "/api.Splitter/SplitData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SplitterServer is the server API for Splitter service.
// All implementations must embed UnimplementedSplitterServer
// for forward compatibility
type SplitterServer interface {
	SplitData(context.Context, *SplitDataRequest) (*SplitDataResponse, error)
	mustEmbedUnimplementedSplitterServer()
}

// UnimplementedSplitterServer must be embedded to have forward compatible implementations.
type UnimplementedSplitterServer struct {
}

func (UnimplementedSplitterServer) SplitData(context.Context, *SplitDataRequest) (*SplitDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SplitData not implemented")
}
func (UnimplementedSplitterServer) mustEmbedUnimplementedSplitterServer() {}

// UnsafeSplitterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SplitterServer will
// result in compilation errors.
type UnsafeSplitterServer interface {
	mustEmbedUnimplementedSplitterServer()
}

func RegisterSplitterServer(s grpc.ServiceRegistrar, srv SplitterServer) {
	s.RegisterService(&Splitter_ServiceDesc, srv)
}

func _Splitter_SplitData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplitDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SplitterServer).SplitData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Splitter/SplitData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SplitterServer).SplitData(ctx, req.(*SplitDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Splitter_ServiceDesc is the grpc.ServiceDesc for Splitter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Splitter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Splitter",
	HandlerType: (*SplitterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SplitData",
			Handler:    _Splitter_SplitData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/index.proto",
}
